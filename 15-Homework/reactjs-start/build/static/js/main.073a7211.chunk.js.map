{"version":3,"sources":["img/anakin_img.jpg","img/rey_img.jpg","img/luke_img.jpg","img/leia_img.jpg","img/rey_avatar.jpg","img/rey_img_2.jpg","img/rey_img_3.jpg","img/palpatine.jpg","img/tick1.png","component/Skeleton.js","component/Posts.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Skeleton","props","class","src","photo","name","tick","nickname","date","content","image","Post","anakin","rey","luke","rey_2","leia","rey_3","rey_avatar","palpatine","Posts","map","posts","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4HAAAA,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,yECA3CD,EAAOC,QAAU,IAA0B,mC,6GC2B5BC,G,MAxBE,SAACC,GACd,OACQ,yBAAKC,MAAM,YACP,yBAAKA,MAAM,gBACP,yBAAKA,MAAM,sBACP,yBAAKC,IAAKF,EAAMG,SAEpB,yBAAKF,MAAM,qBACP,4BAAKD,EAAMI,KAAK,8BAChB,yBAAKF,IAAKF,EAAMK,SAChB,yBAAKJ,MAAM,uBACP,8BAAOD,EAAMM,SAAb,WAA0BN,EAAMO,QAGxC,yBAAKN,MAAM,qBACR,8BAAOD,EAAMQ,WAGpB,yBAAKP,MAAM,sBACP,yBAAKC,IAAKF,EAAMS,Y,4ICR9BC,EAAO,CAAC,CACNN,KAAM,mBACND,MAAOQ,IACPL,SAAU,cACVC,KAAM,SACNC,QAAS,kDACTC,MAAOG,KACT,CACER,KAAM,iBACND,MAAOU,IACPP,SAAU,iBACVC,KAAM,QACNC,QAAS,iDACTC,MAAOK,KACT,CACEV,KAAM,iBACND,MAAOY,IACPT,SAAU,UACVC,KAAM,QACNC,QAAS,+GACTC,MAAOO,KACT,CACGZ,KAAM,gBACND,MAAOc,IACPX,SAAU,aACVC,KAAM,QACNC,QAAS,iDACTC,MAAOS,MAIKC,E,uKAEb,OACA,6BACMT,EAAKU,KAAI,SAAAC,GAAK,OAAK,kBAAC,EAAaA,W,GAJZC,aCjCpBC,MARf,WACE,OACE,6BACI,kBAAC,EAAD,QCKYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.073a7211.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/anakin_img.18867fcd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rey_img.50847147.jpg\";","module.exports = __webpack_public_path__ + \"static/media/luke_img.55da1bf0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/leia_img.3352fdeb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rey_avatar.22de823b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rey_img_2.71852408.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rey_img_3.28584aa0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/palpatine.40b50c9e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tick1.9febcbf7.png\";","import React, { Component }  from 'react';\r\n\r\n\r\nconst Skeleton = (props) => {\r\n    return (\r\n            <div class=\"twit_box\" >\r\n                <div class=\"twit_box_cap\" >\r\n                    <div class=\"twit_box_cap_photo\">\r\n                        <img src={props.photo}/>\r\n                    </div>\r\n                    <div class=\"twit_box_cap_name\">\r\n                        <h5>{props.name}<span>\r\n                        <img src={props.tick}/></span></h5>\r\n                        <div class=\"twit_box_cap_status\">\r\n                            <span>{props.nickname}  â€¢{props.date}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"twit_box_cap_text\">\r\n                       <span>{props.content}</span>\r\n                    </div>\r\n                </div>\r\n                <div class=\"twit_box_container\">\r\n                    <img src={props.image}/>\r\n                </div>\r\n            </div>\r\n    );\r\n}\r\nexport default Skeleton;","import React, { Component }  from 'react';\r\nimport './Posts.css';\r\nimport Skeleton from './Skeleton.js';\r\nimport tick from '../img/tick1.png';\r\nimport anakin from '../img/anakin_img.jpg';\r\nimport rey from '../img/rey_img.jpg';\r\nimport luke from '../img/luke_img.jpg';\r\nimport leia from '../img/leia_img.jpg';\r\nimport rey_avatar from '../img/rey_avatar.jpg';\r\nimport rey_2 from '../img/rey_img_2.jpg';\r\nimport rey_3 from '../img/rey_img_3.jpg';\r\nimport palpatine from '../img/palpatine.jpg';\r\n\r\n\r\nconst Post = [{\r\n        name: \"Anakin Skywalker\",\r\n        photo: anakin,\r\n        nickname: \"@dart_vader\",\r\n        date: \"Feb 29\",\r\n        content: \"WTF? Who is Rey? Why she is Skywalker? Luke...?\",\r\n        image: rey,\r\n    },{\r\n        name: \"Luke Skywalker\",\r\n        photo: luke,\r\n        nickname: \"@defeated_sith\",\r\n        date: \"Mar 1\",\r\n        content: \"I don't know! I taught her for 1 day. Leia...?\",\r\n        image: rey_2,\r\n    },{\r\n        name: \"Leia Skywalker\",\r\n        photo: leia,\r\n        nickname: \"@organa\",\r\n        date: \"Mar 2\",\r\n        content: \"Luke? We were together near Ray on Tatooine. Didn't you hear what she said? Why didn't he say anything then?\",\r\n        image: rey_3,\r\n    },{\r\n         name: \"Rey Skywalker\",\r\n         photo: rey_avatar,\r\n         nickname: \"@last_jedi\",\r\n         date: \"Mar 5\",\r\n         content: \"Won't I introduce myself to Palpatine? He's...\",\r\n         image: palpatine,\r\n}];\r\n\r\n\r\nexport default class Posts extends Component {\r\n    render() {\r\n        return (\r\n        <div>\r\n            { Post.map(posts =>  <Skeleton {...posts}/>) }\r\n        </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport Posts from './component/Posts.js';\nimport './index.css';\n\nfunction App() {\n  return (\n    <div>\n        <Posts/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}